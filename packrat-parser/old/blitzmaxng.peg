# BlitzMax NG
# Parsing Expression Grammar
# Version 0.0 Beta
# Si Dunford [Scaremonger] AUG 2023

# PUBLIC DOMAIN / NO LICENSE REQUIRED / FREE TO USE / OPEN SOURCE / NO WARRANTY

# STATE:    NOT FUNCTIONAL

BLITZMAX -> MODULE / PROGRAM

MODULE -> MODULEHEADER
PROGRAM -> PROGRAMHEADER

MODULEHEADER -> "module" MODNAME EOL
PROGRAMHEADER -> STRICTMODE? FRAMEWORK? IMPORTS*

MODNAME -> ALPHA "." ALPHA
STRICTMODE -> "superstrict" / "strict" EOL

FRAMEWORK -> "framework" EOL

IMPORTS -> "import" MODNAME EOL


#BEGIN_REM -> ^'rem' ![0-9,a-z,A-F,_]
#END_REM:        ^'endrem' / (^'end' ^'rem')
#BLOCK_REM:      BEGIN_REM COMMENT* END_REM
#COMMENT:        !BEGIN_REM !END_REM .*

#BEGIN_TYPE:     ^'type' IDENTIFIER 
#END_TYPE:
#BLOCK_TYPE:     BEGIN_TYPE TYPEDEF* END_TYPE
#TYPEDEF:        !BEGIN_TYPE !END_TYPE .*

CHAR -> UNESCAPED / ESCAPE [n]

ESCAPE -> "~"
UNESCAPED -> [\x20-\x21\x23-\x5B\x5D-\xFFFF]

EOL -> "/r"* "/n"

# Define standard whitespace
_               ->    [\x09,\x20]

# Define Symbols
DQUOTE          -> \x22

# Define sets
DIGIT           -> [0-9]

# Integer literals
INTEGER         -> DIGIT+
HEXADECIMAL     -> "$" [0-9,A-F,a-f]+
BINARY          -> "%" [10]+

# Floating point literals
INTEGER         -> DIGIT+
FLOAT           -> DIGIT* "." DIGIT+

# String literals
STRING          ->DQUOTE CHAR* DQUOTE

# Keywords
IF              -> "if"
END             -> "end"
ENDIF           -> ("endif" / END IF)
ELSE            -> "else"
THEN            -> "then"

# IF STATEMENT
IFSTATEMENT -> IF CONDITION ( THEN / ";" )? STATEMENT ELSE STATEMENT ENDIF / IF CONDITION ( THEN / ";" )? STATEMENT ENDIF




